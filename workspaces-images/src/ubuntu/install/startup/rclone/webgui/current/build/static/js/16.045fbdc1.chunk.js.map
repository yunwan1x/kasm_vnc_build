{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/CardBody.js","actions/configActions.js","../node_modules/reactstrap/es/FormFeedback.js","../node_modules/reactstrap/es/Collapse.js","views/Base/NewDriveAuthModal/NewDriveAuthModal.js","views/RemoteManagement/NewDrive/ProviderAutoSuggest.js","views/RemoteManagement/NewDrive/NewDrive.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","TypeError","propTypes","tag","tagPropType","inverse","PropTypes","bool","color","string","body","outline","className","cssModule","object","innerRef","oneOfType","func","Card","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","ref","defaultProps","CardBody","getProviders","dispatch","getAllProviders","then","data","type","GET_PROVIDERS","payload","providers","getConfigDump","getAllConfigDump","res","GET_CONFIG_DUMP","status","REQUEST_SUCCESS","error","REQUEST_ERROR","children","node","valid","tooltip","FormFeedback","validMode","_transitionStatusToCl","_objectSpread2","Transition","isOpen","arrayOf","navbar","appear","enter","exit","timeout","TransitionTimeouts","Collapse","transitionStatusToClassHash","TransitionStatuses","ENTERING","ENTERED","EXITING","EXITED","getHeight","scrollHeight","_Component","_this","this","state","height","forEach","bind","_assertThisInitialized","_inheritsLoose","_proto","onEntering","isAppearing","setState","onEntered","onExit","onExiting","offsetHeight","onExited","render","_this2","_this$props","otherProps","transitionProps","pick","TransitionPropTypeKeys","childProps","omit","in","collapseClass","getTransitionClass","style","Component","NewDriveAuthModal","super","toggle","closeModal","isVisible","ErrorBoundary","Modal","ModalHeader","data-test","ModalBody","ModalFooter","Button","onClick","getSuggestions","config","inputValue","trim","toLowerCase","inputLength","filter","lang","Description","getSuggestionValue","suggestion","Prefix","renderSuggestion","ProviderAutoSuggest","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","onChange","currentConfig","findFromConfig","renderVal","inputProps","placeholder","alwaysRenderSuggestions","highlightFirstSuggestion","DriveParameters","drivePrefix","loadAdvanced","changeHandler","currentValues","isValidMap","errorsMap","currentProvider","outputMap","Options","map","attr","idx","Hide","Advanced","labelValue","Help","requiredValue","Required","hasExamples","isEmpty","Examples","examplesMap","inputType","IsPassword","Type","key","FormGroup","row","Label","for","Name","sm","Col","Input","invalid","id","required","CustomInput","label","isValid","NewDrive","context","e","target","handleInputChange","inputName","optionTypes","formValues","validateResult","validateSizeSuffix","validateDuration","validateInt","prevState","formErrors","changeDriveType","event","newValue","val","availableOptions","item","DefaultStr","openSetupDrive","preventDefault","editAdvancedOptions","advancedOptions","clearForm","_","driveName","changeName","driveNameIsEditable","validateDriveName","driveNameIsValid","axiosInstance","post","urls","getConfigForRemote","response","errors","openAdvancedSettings","colAdvanced","configEndDiv","scrollIntoView","behavior","gotoNextStep","currentStepNumber","handleSubmit","setCurrentStep","gotoPrevStep","stepNo","StepShowCase","stepTitles","Container","Row","Fragment","md","colRconfig","colSetup","formValuesValid","authModalIsVisible","configCheckInterval","toggleAuthModal","startAuthentication","checkConfigStatus","clearInterval","history","toast","autoClose","validateForm","flag","entries","setInterval","NEW_DRIVE_CONFIG_REFRESH_TIMEOUT","console","stopAuthentication","defaults","finalParameterValues","defaultValueObj","find","ele","array","parameters","match","params","createConfig","info","updateConfig","warn","componentDidMount","log","componentWillUnmount","href","isEdit","connect"],"mappings":"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","file":"static/js/16.045fbdc1.chunk.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardBody = function CardBody(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      innerRef = props.innerRef,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCardBody.propTypes = propTypes;\nCardBody.defaultProps = defaultProps;\nexport default CardBody;","import {GET_CONFIG_DUMP, GET_PROVIDERS, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\nimport {getAllConfigDump, getAllProviders} from \"rclone-api\";\n\n/**\n * Gets all Providers from the rclone UI Backend\n * @returns {Function}\n */\nexport const getProviders = () => dispatch => {\n    getAllProviders().then(data => dispatch({\n        type: GET_PROVIDERS,\n        payload: data.providers\n    }))\n};\n/**\n * Gets dump of configured remotes from the rclone backend\n * @returns {Function}\n */\nexport const getConfigDump = () => dispatch => {\n    getAllConfigDump().then(res => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_SUCCESS,\n        payload: res\n    }), error => dispatch({\n        type: GET_CONFIG_DUMP,\n        status: REQUEST_ERROR,\n        payload: error\n    }))\n};\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool,\n  tooltip: PropTypes.bool\n};\nvar defaultProps = {\n  tag: 'div',\n  valid: undefined\n};\n\nvar FormFeedback = function FormFeedback(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      valid = props.valid,\n      tooltip = props.tooltip,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"valid\", \"tooltip\", \"tag\"]);\n\n  var validMode = tooltip ? 'tooltip' : 'feedback';\n  var classes = mapToCssModules(classNames(className, valid ? \"valid-\" + validMode : \"invalid-\" + validMode), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormFeedback.propTypes = propTypes;\nFormFeedback.defaultProps = defaultProps;\nexport default FormFeedback;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _objectSpread2 from \"@babel/runtime/helpers/esm/objectSpread\";\n\nvar _transitionStatusToCl;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Transition } from 'react-transition-group';\nimport { mapToCssModules, omit, pick, TransitionTimeouts, TransitionPropTypeKeys, TransitionStatuses, tagPropType } from './utils';\n\nvar propTypes = _objectSpread2({}, Transition.propTypes, {\n  isOpen: PropTypes.bool,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  tag: tagPropType,\n  className: PropTypes.node,\n  navbar: PropTypes.bool,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n});\n\nvar defaultProps = _objectSpread2({}, Transition.defaultProps, {\n  isOpen: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  tag: 'div',\n  timeout: TransitionTimeouts.Collapse\n});\n\nvar transitionStatusToClassHash = (_transitionStatusToCl = {}, _transitionStatusToCl[TransitionStatuses.ENTERING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.ENTERED] = 'collapse show', _transitionStatusToCl[TransitionStatuses.EXITING] = 'collapsing', _transitionStatusToCl[TransitionStatuses.EXITED] = 'collapse', _transitionStatusToCl);\n\nfunction getTransitionClass(status) {\n  return transitionStatusToClassHash[status] || 'collapse';\n}\n\nfunction getHeight(node) {\n  return node.scrollHeight;\n}\n\nvar Collapse =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Collapse, _Component);\n\n  function Collapse(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      height: null\n    };\n    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(function (name) {\n      _this[name] = _this[name].bind(_assertThisInitialized(_this));\n    });\n    return _this;\n  }\n\n  var _proto = Collapse.prototype;\n\n  _proto.onEntering = function onEntering(node, isAppearing) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onEntering(node, isAppearing);\n  };\n\n  _proto.onEntered = function onEntered(node, isAppearing) {\n    this.setState({\n      height: null\n    });\n    this.props.onEntered(node, isAppearing);\n  };\n\n  _proto.onExit = function onExit(node) {\n    this.setState({\n      height: getHeight(node)\n    });\n    this.props.onExit(node);\n  };\n\n  _proto.onExiting = function onExiting(node) {\n    // getting this variable triggers a reflow\n    var _unused = node.offsetHeight; // eslint-disable-line no-unused-vars\n\n    this.setState({\n      height: 0\n    });\n    this.props.onExiting(node);\n  };\n\n  _proto.onExited = function onExited(node) {\n    this.setState({\n      height: null\n    });\n    this.props.onExited(node);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        Tag = _this$props.tag,\n        isOpen = _this$props.isOpen,\n        className = _this$props.className,\n        navbar = _this$props.navbar,\n        cssModule = _this$props.cssModule,\n        children = _this$props.children,\n        innerRef = _this$props.innerRef,\n        otherProps = _objectWithoutPropertiesLoose(_this$props, [\"tag\", \"isOpen\", \"className\", \"navbar\", \"cssModule\", \"children\", \"innerRef\"]);\n\n    var height = this.state.height;\n    var transitionProps = pick(otherProps, TransitionPropTypeKeys);\n    var childProps = omit(otherProps, TransitionPropTypeKeys);\n    return React.createElement(Transition, _extends({}, transitionProps, {\n      in: isOpen,\n      onEntering: this.onEntering,\n      onEntered: this.onEntered,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }), function (status) {\n      var collapseClass = getTransitionClass(status);\n      var classes = mapToCssModules(classNames(className, collapseClass, navbar && 'navbar-collapse'), cssModule);\n      var style = height === null ? null : {\n        height: height\n      };\n      return React.createElement(Tag, _extends({}, childProps, {\n        style: _objectSpread2({}, childProps.style, {}, style),\n        className: classes,\n        ref: _this2.props.innerRef\n      }), children);\n    });\n  };\n\n  return Collapse;\n}(Component);\n\nCollapse.propTypes = propTypes;\nCollapse.defaultProps = defaultProps;\nexport default Collapse;","import React from \"react\";\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport * as  PropTypes from \"prop-types\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\n\n\nclass NewDriveAuthModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.props.closeModal();\n    }\n\n\n    render() {\n        const {isVisible} = this.props;\n        return (\n            <div>\n                <ErrorBoundary>\n                    <Modal isOpen={isVisible} toggle={this.toggle}>\n                        <ModalHeader toggle={this.toggle} data-test=\"modalHeader\">Configuring your drive.</ModalHeader>\n                        <ModalBody data-test=\"modalBody\">\n                            A page will open for you with the authentication for your drive. This modal will\n                            automatically\n                            dismiss upon successful creation\n                        </ModalBody>\n                        <ModalFooter data-test=\"modalFooter\">\n                            <Button color=\"primary\" onClick={this.toggle}>Done</Button>{' '}\n                            {/*<Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>*/}\n                        </ModalFooter>\n                    </Modal>\n                </ErrorBoundary>\n            </div>\n        );\n    }\n}\n\nNewDriveAuthModal.propTypes = {\n    isVisible: PropTypes.bool.isRequired,\n    closeModal: PropTypes.func.isRequired\n};\nNewDriveAuthModal.defaultProps = {\n    isVisible: true,\n};\n\n\nexport default NewDriveAuthModal;","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport {findFromConfig} from \"../../../utils/Tools\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.Description.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.Prefix;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion.Description}\n    </div>\n);\n\nclass ProviderAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n\n    render() {\n        const {value, onChange, suggestions} = this.props;\n        const currentConfig = findFromConfig(suggestions, value);\n        let renderVal = \"\";\n        if (currentConfig === undefined) {\n            renderVal = value;\n        } else {\n            renderVal = currentConfig.Description;\n        }\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type a provider type',\n            value: renderVal,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                alwaysRenderSuggestions={true}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n            />\n        );\n    }\n}\n\nexport default ProviderAutoSuggest;","import React from 'react';\nimport {Button, Card, CardBody, Col, Collapse, Container, FormFeedback, FormGroup, Input, Label, Row} from \"reactstrap\";\n// import {config} from \"./config.js\";\nimport NewDriveAuthModal from \"../../Base/NewDriveAuthModal\";\nimport axiosInstance from \"../../../utils/API/API\";\nimport {\n    findFromConfig,\n    isEmpty,\n    validateDriveName,\n    validateDuration,\n    validateInt,\n    validateSizeSuffix\n} from \"../../../utils/Tools\";\nimport ProviderAutoSuggest from \"./ProviderAutoSuggest\";\nimport {toast} from \"react-toastify\";\nimport * as PropTypes from 'prop-types';\nimport {getProviders} from \"../../../actions/configActions\";\nimport {connect} from \"react-redux\";\nimport {NEW_DRIVE_CONFIG_REFRESH_TIMEOUT} from \"../../../utils/Constants\";\nimport ErrorBoundary from \"../../../ErrorHandling/ErrorBoundary\";\nimport urls from \"../../../utils/API/endpoint\";\n\n/**\n * Returns a component with set of input, error for the drivePrefix.\n * The input type changes based on config.Options.Type parameter. see code for details.\n * @param drivePrefix   {string}    Name of the remote in the config.\n * @param loadAdvanced  {boolean}   Load or skip the advanced options from the config options.\n * @param changeHandler {function}  This function is called once the value changes\n * @param currentValues {$ObjMap}   This map denotes current updated values for the parameters.\n * @param isValidMap    {$ObjMap}   This map denotes whether the parameter value is valid. This should be set by the changeHandler.\n * @param errorsMap     {$ObjMap}   This map contains string errors of each parameters.\n * @param config        {$ObjMap}   This map contains the actual parameter list and Options for all the providers.\n * @returns             {Array|*}   JSX array with parameter formGroups.\n * @constructor\n */\nfunction DriveParameters({drivePrefix, loadAdvanced, changeHandler, currentValues, isValidMap, errorsMap, config}) {\n    if (drivePrefix !== undefined && drivePrefix !== \"\") {\n        const currentProvider = findFromConfig(config, drivePrefix);\n        let outputMap = [];\n        if (currentProvider !== undefined) {\n            const inputsMap = currentProvider.Options;\n\n            // console.log(\"current values\" + currentValues);\n\n            /* Options format is as follows\n            {\n                        \"Advanced\": true,\n                        \"Default\": -1,\n                        \"DefaultStr\": \"off\",\n                        \"Help\": \"If Object's are greater, use drive v2 API to download.\",\n                        \"Hide\": 0,\n                        \"IsPassword\": false,\n                        \"Name\": \"v2_download_min_size\",\n                        \"NoPrefix\": false,\n                        \"Provider\": \"\",\n                        \"Required\": false,\n                        \"ShortOpt\": \"\",\n                        \"Type\": \"SizeSuffix\",\n                        \"Value\": null,\n                        \"ValueStr\": \"off\"\n                    },\n\n            */\n\n            outputMap = inputsMap.map((attr, idx) => {\n                if (attr.Hide === 0 && ((loadAdvanced && attr.Advanced) || (!loadAdvanced && !attr.Advanced))) {\n                    const labelValue = `${attr.Help}`;\n                    const requiredValue = ((attr.Required) ? (<i className={\"text-red\"}>*</i>) : null);\n\n                    const hasExamples = !isEmpty(attr.Examples);\n                    let examplesMap = null;\n\n                    let inputType = \"\";\n\n\n                    if (attr.IsPassword) {\n                        inputType = \"password\";\n                    } else if (hasExamples) {\n                        inputType = \"string\";\n                        // examplesMap = attr.Examples.map((ex1, id1) => {\n                        //     return (<option key={\"option\" + id1} value={ex1.Value}>{ex1.Help}</option>);\n                        // })\n                    } else if (attr.Type === \"bool\") {\n                        inputType = \"select\";\n                        examplesMap = [\n                            (<option key={1} value={true}>Yes</option>),\n                            (<option key={2} value={false}>No</option>)\n                        ];\n                    } else {\n                        // TODO: Write logic for SizeSuffix, Duration, int\n                        if (attr.Type === \"int\") {\n                            inputType = \"number\";\n                        } else if (attr.Type === \"string\") {\n                            inputType = \"text\";\n                        } else {\n                            inputType = \"text\";\n                        }\n\n                    }\n                    return (\n                        <FormGroup key={idx} row>\n                            <Label for={attr.Name} sm={5}>{labelValue}{requiredValue}</Label>\n                            <Col sm={7}>\n                                <Input type={inputType} value={currentValues[attr.Name]}\n                                       name={attr.Name} valid={isValidMap[attr.Name]} invalid={!isValidMap[attr.Name]}\n                                       id={attr.Name} onChange={changeHandler} required={attr.Required}>\n                                    {examplesMap}\n                                </Input>\n                                <FormFeedback>{errorsMap[attr.Name]}</FormFeedback>\n\n                            </Col>\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        }\n        return outputMap;\n    }\n    return (\n        <div>Select a drive type to continue</div>\n    );\n}\n\n// function DriveTypes({config}) {\n//     // console.log(config);\n//     let configMap = config.map((drive, idx) => (\n//         <option key={drive.Prefix} value={idx}>{drive.Description}</option>\n//     ));\n//     return configMap;\n// }\n\n\n/**\n * Functional Component. Custom input for selecting a new name for the current config.\n * @param key           {string}    Contains the key to be used as the react key parameter in an array\n * @param id            {string}    Id to be used as a HTML id.\n * @param label         {string}    Label of the form input\n * @param changeHandler {function}  Called when the input changes.\n * @param type          {string}    Type of the input (ReactStrap supported). Eg: select, text etc.\n * @param value         {string}    The current value of the input.\n * @param name          {string}    The html name for the input.\n * @param placeholder   {string}    Placeholder text for input.\n * @param isValid       {boolean}   If set, displays positive message, else displays error message.\n * @returns             {*}         Functional component.\n * @constructor\n */\nfunction CustomInput({key, id, label, changeHandler, type, value, name, placeholder, isValid = false}) {\n    return (\n        <FormGroup key={key} row>\n            <Label for={id} sm={5}>{label}</Label>\n            <Col sm={7}>\n                <Input type={type} value={value} name={name} placeholder={placeholder}\n                       id={id} onChange={changeHandler} valid={isValid} invalid={!isValid} required/>\n                <FormFeedback valid>Sweet! that name is available</FormFeedback>\n                <FormFeedback>Sad! That name is already assigned or empty</FormFeedback>\n            </Col>\n        </FormGroup>);\n}\n\n/**\n * Component to create a new remote configuration.\n */\nclass NewDrive extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n\n            colRconfig: true,\n            colSetup: false,\n            colAdvanced: false,\n            driveName: \"\",\n            driveNameIsEditable: true,\n\n            advancedOptions: false,\n            formValues: {},\n            formValuesValid: {},\n            required: {},\n            authModalIsVisible: false,\n\n            drivePrefix: \"\",\n            driveNameIsValid: false,\n            formErrors: {driveName: \"\"},\n            optionTypes: {},\n            isValid: {},\n\n            currentStepNumber: 1\n\n        };\n        this.configCheckInterval = null;\n        // console.log(\"Params\", this.props.match.params);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.toggleAuthModal = this.toggleAuthModal.bind(this);\n        this.startAuthentication = this.startAuthentication.bind(this);\n        this.checkConfigStatus = this.checkConfigStatus.bind(this);\n    }\n\n    /**\n     *\n     * @param e {$ObjMap} Event of the toggle event.\n     */\n    toggle = (e) => {\n        let name = e.target.name;\n\n        this.setState({[name]: !this.state[name]})\n    };\n\n    // Returns true or false based on whether the config is created\n    async checkConfigStatus() {\n        const {driveName} = this.state;\n\n        try {\n            let res = await axiosInstance.post(urls.getConfigForRemote, {name: driveName});\n            // console.log(res);\n\n            if (!isEmpty(res.data)) {\n                // Config is created, clear the interval and hide modal\n                clearInterval(this.configCheckInterval);\n                this.configCheckInterval = null;\n                this.toggleAuthModal();\n                this.props.history.push('/dashboard');\n\n            }\n        } catch (e) {\n            // console.log(`Error occurred while checking for config: ${e}`);\n            toast.error(`Error creating config. ${e}`, {\n                autoClose: false\n            });\n        }\n    }\n\n    /**\n     * Handle inoit change and set appropriate errors.\n     * @param e\n     */\n    handleInputChange = (e) => {\n\n        let inputName = e.target.name;\n        let inputValue = e.target.value;\n        const inputType = this.state.optionTypes[inputName];\n        this.setState({\n            formValues: {\n                ...this.state.formValues,\n                [inputName]: inputValue\n            }\n        });\n        let validateResult = true;\n        let error = \"\";\n        if (inputType === \"SizeSuffix\") {\n            validateResult = validateSizeSuffix(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is size( off | {unit}{metric} eg: 10G, 100M, 10G100M etc.)\"\n            }\n        } else if (inputType === \"Duration\") {\n            validateResult = validateDuration(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is time ({unit}{metric} eg: 10ms, 100m, 10h15ms etc.)\"\n            }\n        } else if (inputType === \"int\") {\n            validateResult = validateInt(inputValue);\n            if (!validateResult) {\n                error = \"The valid input is int (100,200,300 etc)\"\n            }\n        }\n\n        if (this.state.required[inputName] && (!inputValue || inputValue === \"\")) {\n            validateResult = false;\n            if (!validateResult) {\n                error += \" This field is required\";\n            }\n        }\n\n\n        this.setState((prevState) => {\n            return {\n                isValid: {\n                    ...prevState.isValid,\n                    [inputName]: validateResult\n                },\n                formErrors: {\n                    ...prevState.formErrors,\n                    [inputName]: error\n                },\n            }\n        });\n\n\n    };\n\n    /**\n     * Update the driveType and then load the equivalent input parameters for that drive.\n     * @param event     {$ObjMap} Event to be handled.\n     * @param newValue  {string} new Value of the drive type.\n     */\n    changeDriveType = (event, {newValue}) => {\n\n        const {providers} = this.props;\n\n        let val = newValue;\n\n\n        let availableOptions = {};\n        let optionTypes = {};\n        let isValid = {};\n        let formErrors = {};\n        let required = {};\n        // let drivePrefix = \"\";\n        // console.log(\"driveType change\", val);\n        if (val !== undefined && val !== \"\") {\n\n            const currentConfig = findFromConfig(providers, val);\n            if (currentConfig !== undefined) {\n\n                currentConfig.Options.forEach(item => {\n\n                    const {DefaultStr, Type, Name, Required, Hide} = item;\n                    if (Hide === 0) {\n                        availableOptions[Name] = DefaultStr;\n                        optionTypes[Name] = Type;\n                        required[Name] = Required;\n\n                        isValid[Name] = !(Required && (!DefaultStr || DefaultStr === \"\"));\n\n                        formErrors[Name] = \"\";\n                    }\n                });\n            }\n            this.setState({\n                drivePrefix: val,\n                formValues: availableOptions,\n                optionTypes: optionTypes,\n                isValid: isValid,\n                formErrors: formErrors,\n                required: required\n            });\n        } else {\n            this.setState({drivePrefix: val})\n\n        }\n    };\n\n    /**\n     * Open second step of setting up the drive and scroll into view.\n     */\n    openSetupDrive = (e) => {\n        if (e) e.preventDefault();\n        this.setState({'colSetup': true});\n        // this.setupDriveDiv.scrollIntoView({behavior: \"smooth\"});\n    };\n\n    /**\n     *  toggle the step 3: advanced options\n     */\n    editAdvancedOptions = (e) => {\n        this.setState({advancedOptions: !this.state.advancedOptions});\n    };\n\n    /**\n     * Validate the form and set the appropriate errors in the state.\n     * @returns {boolean}\n     */\n    validateForm() {\n        //    Validate driveName and other parameters\n        const {driveNameIsValid, drivePrefix, isValid} = this.state;\n        let flag = true;\n\n        if (!driveNameIsValid) {\n            flag = false;\n        }\n        if (drivePrefix === \"\") {\n            flag = false;\n        }\n\n\n        /*Check for validations based on inputType*/\n        for (const [key, value] of Object.entries(isValid)) {\n            if (!key || !value) {\n                flag = false;\n                break;\n            }\n        }\n\n        return flag;\n    }\n\n    /**\n     *  Show or hide the auth modal.\n     */\n    toggleAuthModal() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: !state.authModalIsVisible}\n        });\n    }\n\n    /**\n     *  Show or hide the authentication modal and start timer for checking if the new config is created.\n     */\n    startAuthentication() {\n        this.toggleAuthModal();\n        // Check every second if the config is created\n        if (this.configCheckInterval === null) {\n            this.configCheckInterval = setInterval(this.checkConfigStatus, NEW_DRIVE_CONFIG_REFRESH_TIMEOUT);\n        } else {\n            console.error(\"Interval already running. Should not start a new one\");\n        }\n\n    }\n\n    /**\n     *  Called when the config is successfully created. Clears the timout and hides the authentication modal.\n     */\n    stopAuthentication() {\n        this.setState((state, props) => {\n            return {authModalIsVisible: false}\n        });\n        clearInterval(this.configCheckInterval);\n\n    }\n\n    /**\n     * Called when form action submit is to be handled.\n     * Validate form and submit request.\n     * */\n    async handleSubmit(e) {\n        e && e.preventDefault();\n        // console.log(\"Submitted form\");\n\n        const {formValues, drivePrefix} = this.state;\n        const {providers} = this.props;\n\n\n        if (this.validateForm()) {\n\n            if (drivePrefix !== undefined && drivePrefix !== \"\") {\n                const currentProvider = findFromConfig(providers, drivePrefix);\n                if (currentProvider !== undefined) {\n\n\n                    const defaults = currentProvider.Options;\n\n                    // console.log(config, formValues, defaults);\n\n                    let finalParameterValues = {};\n\n\n                    for (const [key, value] of Object.entries(formValues)) {\n\n                        if (key === \"token\") {\n                            finalParameterValues[key] = value;\n                            continue;\n                        }\n                        const defaultValueObj = defaults.find((ele, idx, array) => {\n                            // console.log(key, ele.Name, key === ele.Name);\n                            return (key === ele.Name);\n                        });\n                        if (defaultValueObj) {\n\n                            const {DefaultStr} = defaultValueObj;\n                            if (value !== DefaultStr) {\n                                // console.log(`${value} !== ${DefaultStr}`);\n                                finalParameterValues[key] = value;\n                            }\n                        }\n\n                    }\n\n\n                    let data = {\n                        parameters: finalParameterValues,\n\n                        name: this.state.driveName,\n                        type: this.state.drivePrefix\n                    };\n\n\n                    // console.log(\"Validated form\");\n                    this.startAuthentication();\n                    try {\n                        const {drivePrefix} = this.props.match.params;\n\n                        if (!drivePrefix) {\n\n                            await axiosInstance.post(urls.createConfig, data);\n                            toast.info(\"Config created\");\n                        } else {\n                            await axiosInstance.post(urls.updateConfig, data);\n                            toast.info(\"Config Updated\");\n                        }\n\n                    } catch (err) {\n                        toast.error(`Error creating config. ${err}`, {\n                            autoClose: false\n                        });\n                        this.stopAuthentication();\n                    }\n\n                }\n            }\n        } else {\n            // if (!this.state.colSetup) {\n            //     this.openSetupDrive();\n            // }\n\n            // if (this.state.advancedOptions && !this.state.colAdvanced) {\n            //     this.openAdvancedSettings();\n            // }\n            toast.warn(`Check for errors before submitting.`, {\n                autoClose: false\n            });\n        }\n    }\n\n    /**\n     * Clears the entire form.\n     * Clearing the driveName and drivePrefix automatically clears the inputs as well.\n     * */\n    clearForm = _ => {\n        this.setState({driveName: \"\", drivePrefix: \"\"})\n    };\n\n\n    /**\n     * Change the name of the drive. Check if it already exists, if not, allow to be changes, else set error.\n     * */\n    changeName = e => {\n        const {driveNameIsEditable} = this.state;\n        const value = e.target.value;\n        if (driveNameIsEditable && validateDriveName(value)) {\n\n            this.setState({driveName: value}, () => {\n\n                if (value === undefined || value === \"\") {\n                    this.setState({driveNameIsValid: false});\n                } else {\n\n                    axiosInstance.post(urls.getConfigForRemote, {name: value}).then((response) => {\n                        let errors = this.state.formErrors;\n                        let isValid = isEmpty(response.data);\n                        if (isValid) {\n                            errors[\"driveName\"] = \"\";\n                        } else {\n                            errors[\"driveName\"] = \"Duplicate\";\n\n                        }\n                        this.setState({formErrors: errors, driveNameIsValid: isValid});\n                    });\n                }\n\n            });\n\n        } else {\n            this.setState((prevState) => ({formErrors: {...prevState.formErrors, \"driveName\": \"Cannot edit name\"}}))\n        }\n    };\n\n    /**\n     * Open the advanced settings card and scroll into view.\n     * @param e\n     */\n    openAdvancedSettings = e => {\n        if (this.state.advancedOptions) {\n            this.setState({colAdvanced: true});\n        } else {\n            this.configEndDiv.scrollIntoView({behavior: \"smooth\"});\n        }\n    };\n\n\n    /**\n     * Check if the provider list is empty else request new providers list.\n     * */\n\n    componentDidMount() {\n        const {drivePrefix} = this.props.match.params;\n\n\n        if (!this.props.providers || this.props.providers.length < 1)\n            this.props.getProviders();\n\n        if (drivePrefix) {\n            //Edit Mode\n            this.setState({driveName: drivePrefix, driveNameIsValid: true, driveNameIsEditable: false});\n            axiosInstance.post(urls.getConfigForRemote, {name: drivePrefix}).then(\n                (res) => {\n                    console.log(res);\n                    this.changeDriveType(undefined, {newValue: res.data.type});\n\n                    this.setState((prevState) => ({\n                        formValues: {...prevState.formValues, ...res.data}\n                    }))\n\n                }\n            )\n        }\n    }\n\n    /**\n     * Clear the intervals.\n     * */\n\n    componentWillUnmount() {\n        clearInterval(this.configCheckInterval);\n        this.configCheckInterval = null;\n    }\n\n    gotoNextStep = () => {\n        const {currentStepNumber, advancedOptions} = this.state;\n        if ((advancedOptions && currentStepNumber === 3) || (!advancedOptions && currentStepNumber === 2)) {\n            this.handleSubmit(null);\n        } else {\n            this.setCurrentStep(currentStepNumber + 1);\n        }\n    };\n\n    gotoPrevStep = () => {\n        const {currentStepNumber} = this.state;\n        this.setCurrentStep(currentStepNumber - 1);\n    };\n\n\n    setCurrentStep = (stepNo) => {\n        this.setState({currentStepNumber: stepNo});\n\n    };\n\n    StepShowCase = ({currentStepNumber}) => {\n        const buttonActiveClassName = \"step-active\";\n        const stepTitles = [\n            \"Set up Remote Config\",\n            \"Set up Drive\",\n            \"Advanced Config\"\n        ];\n\n        return (\n            <Container className=\"timeline\">\n                <Row>\n                    {stepTitles.map((item, idx) => {\n                        idx += 1;\n                        return (\n                            <React.Fragment key={idx}>\n                                <Col\n                                    className={\"text-center \" + ((currentStepNumber === idx) ? buttonActiveClassName : \"\")}\n                                    md={2} sm={4}>\n                                    <button className=\"btn btn-step-count\"\n                                            onClick={() => this.setCurrentStep(idx)}>{idx}</button>\n                                    <h4>{item}</h4>\n                                </Col>\n                                {idx !== stepTitles.length && <Col md={3} className={\"d-none d-md-block\"}>\n                                    <div className=\"timeline-divider align-middle\"></div>\n\n                                </Col>}\n                            </React.Fragment>\n                        )\n                    })}\n\n                </Row>\n            </Container>\n        )\n\n    }\n\n    /* return (\n            <div className=\"timeline\">\n                <span className=\"li complete\">\n                    <button className=\"btn btn-primary btn-step-count\">1</button>\n                    <div class=\"status\">\n                        <h4> Shift Created </h4>\n                    </div>    \n                </span> \n                <div className=\"timeline-divider\"></div>  \n                <li className=\"li complete\">\n                    <div class=\"status\">\n                        <h4> Shift Created </h4>\n                    </div>    \n                </li>   \n                <li className=\"li complete\">\n                    <div class=\"status\">\n                        <h4> Shift Created </h4>\n                    </div>    \n                </li>    \n            </div>\n       ) */\n\n\n    render() {\n        const {drivePrefix, advancedOptions, driveName, driveNameIsValid, currentStepNumber} = this.state;\n        const {providers} = this.props;\n        return (\n            <div data-test=\"newDriveComponent\">\n                <ErrorBoundary>\n                    <p>This 3 step process will guide you through creating a new config. For auto config, leave the\n                        parameters as it is.</p>\n                    <this.StepShowCase currentStepNumber={currentStepNumber}/>\n                    <Collapse isOpen={currentStepNumber === 1}>\n                        <Card>\n\n                            <CardBody>\n                                <CustomInput label=\"Name of this drive (For your reference)\"\n                                             changeHandler={this.changeName} value={driveName}\n                                             placeholder={\"Enter a name\"} name=\"name\" id=\"driveName\"\n                                             isValid={driveNameIsValid}/>\n\n                                <FormGroup row>\n                                    <Label for=\"driveType\" sm={5}>Select</Label>\n                                    <Col sm={7}>\n                                        <ProviderAutoSuggest suggestions={providers} value={drivePrefix}\n                                                             onChange={this.changeDriveType}/>\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Col sm={3}>\n                                        <Label for=\"inputDriveName\">Docs are available at </Label>{' '}\n                                        <a href=\"https://rclone.org/commands/rclone_config/\">Rclone Config</a>\n                                    </Col>\n                                </FormGroup>\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n\n                                        <Button className=\"ml-3 btn-blue\" onClick={this.gotoNextStep}>Next</Button>\n\n                                    </div>\n                                </div>\n                            </CardBody>\n\n                        </Card>\n                    </Collapse>\n                    <Collapse isOpen={currentStepNumber === 2}>\n                        <Card>\n                            {/*div for Scrolling to here*/}\n                            {/* <div ref={(el) => this.setupDriveDiv = el}/> */}\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={false}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n                                        <Input type=\"checkbox\" value={advancedOptions}\n                                               onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\n                                        <Button className=\"btn-no-background\" onClick={this.gotoPrevStep}>Go\n                                            back</Button>\n\n                                        <Button className=\"ml-3 btn-blue\" onClick={this.gotoNextStep}>Next</Button>\n\n                                    </div>\n                                </div>\n                            </CardBody>\n                        </Card>\n                    </Collapse>\n                    <Collapse isOpen={currentStepNumber === 3}>\n                        <Card>\n                            {/* <CardHeader>\n                                    <h5>\n                                        <Button color=\"link\" name=\"colAdvanced\" onClick={this.toggle}\n                                                style={{marginBottom: '1rem'}}><strong>Step 3:</strong> Advanced\n                                            (optional)</Button>\n\n                                    </h5>\n\n                                </CardHeader> */}\n\n\n                            <CardBody>\n                                <DriveParameters drivePrefix={drivePrefix} loadAdvanced={true}\n                                                 changeHandler={this.handleInputChange}\n                                                 errorsMap={this.state.formErrors}\n                                                 isValidMap={this.state.isValid}\n                                                 currentValues={this.state.formValues} config={providers}/>\n\n                                <div className=\"clearfix\">\n                                    <div className=\"float-right\">\n                                        <Input type=\"checkbox\" value={advancedOptions}\n                                               onChange={this.editAdvancedOptions}/><span className=\"mr-3\">Edit Advanced Options</span>\n                                        <Button className=\"btn-no-background\" onClick={this.gotoPrevStep}>Go\n                                            back</Button>\n\n                                        <Button className=\"ml-3 btn-blue\" onClick={this.gotoNextStep}>Next</Button>\n                                    </div>\n                                </div>\n                            </CardBody>\n\n\n                        </Card>\n                    </Collapse>\n                    {/* <div className=\"clearfix\" ref={(el) => {\n                            this.configEndDiv = el\n                        }}>\n                            <div className=\"float-right mb-3\">\n                                <Button color=\"info\" type=\"reset\" onClick={() => this.clearForm()}>Clear</Button>\n                                <Button color=\"success\" type=\"submit\">Create Config</Button>\n\n                            </div>\n                        </div> */}\n                    <NewDriveAuthModal isVisible={this.state.authModalIsVisible} closeModal={this.toggleAuthModal}/>\n                </ErrorBoundary>\n            </div>);\n    }\n}\n\nconst mapStateToProps = state => ({\n    /**\n     * The list of all providers.\n     */\n    providers: state.config.providers\n});\n\nNewDrive.propTypes = {\n    providers: PropTypes.array.isRequired,\n    getProviders: PropTypes.func.isRequired,\n    isEdit: PropTypes.bool.isRequired,\n    driveName: PropTypes.string\n};\n\nNewDrive.defaultProps = {\n    isEdit: false,\n};\n\nexport default connect(mapStateToProps, {getProviders})(NewDrive);\n"],"sourceRoot":""}